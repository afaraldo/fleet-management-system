require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/notifications", type: :request do
  login_user

  # This should return the minimal set of attributes required to create a valid
  # Notification. As you add validations to Notification, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    { message: "New Notification"}
  }

  let(:invalid_attributes) {
    {}
  }

  let(:user) { User.first }

  before { host! 'http://localhost:3000' }

  describe "GET /index" do
    before { host! "api.localhost.com" }
    it "renders a successful response" do
      notification = EventNotification.with(valid_attributes)

      # Deliver notification immediately
      notification.deliver(user)

      get user_notifications_path(user)
      expect(response).to be_successful
    end
  end

  describe "GET /show" do
    it "renders a successful response" do
      notification = EventNotification.with(valid_attributes)

      # Deliver notification immediately
      notification.deliver(user)
      get user_notification_url(user, notification.record) # Use route _url!!!
      expect(response).to be_successful
    end
  end

  describe "DELETE /destroy" do
    it "destroys the requested notification" do
      notification = EventNotification.with(valid_attributes)

      # Deliver notification immediately
      notification.deliver(user)
      expect {
        delete user_notification_url(user, notification.record) # Use route _url!!!
      }.to change(Notification, :count).by(-1)
    end

    it "redirects to the notifications list" do
      notification = EventNotification.with(valid_attributes)

      # Deliver notification immediately
      notification.deliver(user)
      delete user_notification_url(user, notification.record) # Use route _url!!!
      expect(response).to redirect_to(user_notifications_path(user))
    end
  end
end
