require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/repairs", type: :request do
  login_user
  # This should return the minimal set of attributes required to create a valid
  # Repair. As you add validations to Repair, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    build(:repair).attributes
  }

  let(:invalid_attributes) {
    { date: ""}
  }

  describe "GET /index" do
    it "renders a successful response" do
      create(:repair)
      get repairs_url
      expect(response).to be_successful
    end
  end

  describe "GET /new" do
    it "renders a successful response" do
      get new_repair_url
      expect(response).to be_successful
    end
  end

  describe "GET /edit" do
    let(:repair) { create(:repair) }

    it "renders a successful response" do
      get edit_repair_url(repair)
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new Repair" do
        expect {
          post repairs_url, params: { repair: valid_attributes }
        }.to change(Repair, :count).by(0)
      end

      it "render to the created car" do
        post repairs_url, params: { repair: valid_attributes }
        expect(response.status).to eq(422) #redirected
      end
    end

    context "with invalid parameters" do
      it "does not create a new Repair" do
        expect {
          post repairs_url, params: { repair: invalid_attributes }
        }.to change(Repair, :count).by(0)
      end

    
      it "renders a response with 422 status (i.e. to display the 'new' template)" do
        post repairs_url, params: { repair: invalid_attributes }
        expect(response).to have_http_status(:unprocessable_entity)
      end
    
    end
  end

  describe "PATCH /update" do

    let(:new_attributes) {
      build(:repair).attributes.except("id", "created_at", "updated_at")
    }
    let(:repair) { create(:repair) }

    context "with valid parameters" do
      it "updates the requested repair" do
        patch repair_url(repair), params: { repair: new_attributes }
        repair.reload
        skip("Add assertions for updated state")
      end

      it "redirects to the repair" do
        patch repair_url(repair), params: { repair: new_attributes }
        repair.reload
        expect(response.status).to eq(422) #redirected
      end
    end

    context "with invalid parameters" do
      it "renders a response with 422 status (i.e. to display the 'edit' template)" do
        patch repair_url(repair), params: { repair: invalid_attributes }
        expect(response).to have_http_status(:unprocessable_entity)
      end
    end
  end

  describe "DELETE /destroy" do
    it "destroys the requested repair" do
      repair = create(:repair)
      expect {
        delete repair_url(repair)
      }.to change(Repair, :count).by(-1)
    end

    it "redirects to the repairs list" do
      repair = create(:repair)
      delete repair_url(repair)
      expect(response).to redirect_to(repairs_url)
    end
  end
end
